What happens when you initialize a repository? Why do you need to do it?
When you initialize a repository, a hidden git file is created. This is used to track the changes
made by the users of the repository. You need to initialize the repository inorder to have version control.

How is the staging area different from the working directory and the repository? What value do you think it offers?
Working directory is a file in the system. Staging area acts as an intermidiary between repository and working directory.
Repository contains the final commits and change. The main advantage of staging area
it acts as a shield between repository and working directory preventing us from commiting a file carelessly

How can you use the staging area to make sure you have one commit per logical change?
You can use git diff --staged to see the changes you made and if you have more than one logical change try to differentiate each logical change
and commit one at a time.

 What are some situations when branches would be helpful in keeping your history organized? How would branches help?
 When you are making many different changes ,like adding a new feature, debugging the code and implementing a better code,
 you would want these changes to be disjoint from the original code.
 During this time branches would be really helpful in separating the task and prevent overlapping of the code. By using branches we give different name to our implementations,
 this helpe us in keeping distinct changes separate.

 How do the diagrams help you visualize the branch structure?
 Diagram helps us to draw the branches and see where it is splitting. It also helps us to identify commits that are not specific to a branch. 

 What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
 When we merge two branch, the commits from both can be accessed from a single point. 
 Changes that are common and code insertion by both users are added but deletion by either users are not added. 
 We represent the diagram that way since both branches are accessible. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
The pros of doing automatic merging it is fast. The pros of doing manually is 
the users can communicate with each other therby avoiding any future conflict due
to the changes made.